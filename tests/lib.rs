extern crate erl_etf;

use erl_etf::*;
use std::io::Cursor;

//
// Decoding
//

fn atom(s: &str) -> ErlangExtTerm {
    return ErlangExtTerm::Atom(s.to_string());
}

#[test]
fn decode_atom() {
    // 8> term_to_binary(a).
    // <<131,100,0,1,97>>
    let res1 = ErlangExtTerm::decode(Box::new(Cursor::new(&[131, 100, 0, 1, 97]))).unwrap();
    assert_eq!(atom("a"), res1);
    // 9> term_to_binary(b).
    // <<131,100,0,1,98>>
    let res2 = ErlangExtTerm::decode(Box::new(Cursor::new(&[131, 100, 0, 1, 98]))).unwrap();
    assert_eq!(atom("b"), res2);
    // 11> term_to_binary(erlang).
    // <<131,100,0,6,101,114,108,97,110,103>>
    let input3 = Box::new(Cursor::new(&[131, 100, 0, 6, 101, 114, 108, 97, 110, 103]));
    assert_eq!(atom("erlang"), ErlangExtTerm::decode(input3).unwrap());
    // 12> term_to_binary(rust).
    // <<131,100,0,4,114,117,115,116>>
    let input4 = Box::new(Cursor::new(&[131, 100, 0, 4, 114, 117, 115, 116]));
    let res4 = ErlangExtTerm::decode(input4).unwrap();
    assert_eq!(atom("rust"), res4);
    // 10> term_to_binary('Cádiz').
    // <<131,100,0,5,67,225,100,105,122>>
    let input5 = Box::new(Cursor::new(&[131, 100, 0, 5, 67, 225, 100, 105, 122]));
    let res5 = ErlangExtTerm::decode(input5).unwrap();
    assert_eq!(atom("Cádiz"), res5);
    // 12> term_to_binary('Эрланг').
    // <<131,119,12,208,173,209,128,208,187,208,176,208,189,208,179>>
    // uses SMALL_ATOM_UTF8_EXT
    let input6 = Box::new(Cursor::new(&[131, 119, 12, 208, 173, 209, 128, 208, 187, 208, 176, 208, 189, 208, 179]));
    let res6 = ErlangExtTerm::decode(input6).unwrap();
    assert_eq!(atom("Эрланг"), res6);
    // uses ATOM_UTF8_EXT
    let input7 = Box::new(Cursor::new(&[
        131,118,1,226,208,174,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,
        209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,142,209,
        142,208,189,208,184,208,186,208,190,208,180
    ]));
    let res7 = ErlangExtTerm::decode(input7).unwrap();
    let s = "Ююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююююникод";
    assert_eq!(atom(s), res7);
}

//
// Helpers
//

